#2. Write note on composition

"""It is one of the fundamental concepts of Object-Oriented Programming. In this concept, we will describe a class
that references to one or more objects of other classes as an Instance variable. Here, by using the class name or
by creating the object we can access the members of one class inside another class. It enables creating complex
types by combining objects of different classes. It means that a class Composite can contain an object of another
class Component. This type of relationship is known as Has-A Relation."""#3. Write difference between inheretance and composition

"""Inheritance will extend the functionality with extra features allows overriding of methods, but in the case of
Composition, we can only use that class we can not modify or extend the functionality of it. It will not provide
extra features. Thus, when one needs to use the class as it without any modification, the composition is recommended
 and when one needs to change the behavior of the method in another class, then inheritance is recommended.""""""4. Using composition: Use below details and write a program to print the Laptop details along with its processor specification
	1. Create two classes Laptop and Processor.
	2. Create "display" method in the Laptop class"""

class Laptop:

    def display(self):
        print("30000 rupees laptop with all specialities")

class Processor:
    def __init__(self):
        self.obj=Laptop()
        print("3 Ghz processor")
        self.obj.display()

ob=Processor()

"""Output
3 Ghz processor
30000 rupees laptop with all specialities"""
"""4. Using composition: Use below details and write a program to print the Laptop details along with its processor specification
	1. Create two classes Laptop and Processor.
	2. Create "display" method in the Laptop class"""

class Laptop:
    def __init__(self):
        print("30000 rupees laptop")

class Processor:
    def __init__(self):
        self.obj=Laptop()
        print("3 Ghz processor")

ob=Processor()

"""Output
30000 rupees laptop
3 Ghz processor
""""""5. Using composition: Use below details and write a program to print the User details along with its Car details
	1. Create two classes User and Car.
	2. Create "display" method in both classes."""

class User:
    def display(self):
        print("User is Ankit")

class Car:
    def display(self):
        self.obj = User()
        self.obj.display()
        print("Car is Swift")

ob=Car()
ob.display()

"""Output
User is Ankit
Car is Swift
""""""5. Using composition: Use below details and write a program to print the User details along with its Car details
	1. Create two classes User and Car.
	2. Create "display" method in both classes."""

class User:
    def __init__(self):
        print("User is Ankit")

class Car:
    def __init__(self):
        self.obj=User()
        print("Car is Swift")

ob=Car()

"""Output
User is Ankit
Car is Swift""""""6. Using composition:
	1. Create class c1 with variable v1=2 and method m1. Method m1 prints the method name and class name. Inside the consuructer initialize the self with new variable v2=4
	2. Create class c2 with variable v3=6 and method m2. Method m1 prints the method name and class name. Inside the consuructer initialize the self with new variable v4=8
	3. Define method m3 in the class c2 , create the instance of class c2 and print the v1 and v2. Call m2 method using c1. Print v3 and v4 using self and c2. Call m2 using self.
"""

class c1:
    v1=2
    def m1(self):
        print("Method is m1 and class is c1")
    def __init__(self):
        v2=4

class c2:
    v3=6
    def m2(self):
        print("Method is m2 and class is c2")

    def __init__(self):
        v4 = 8

    def m3(self):
        self.obj=c1()
        print(self.obj.v1)
        #print(self.obj.v2)

ob=c2()
ob.m3()"""7. Uning Inheretance
	1. Create parent class with variable as name
	2. Initialize the instance with new variable v2=20 inside the constructer
	3. Create method m1 with self as parameter and print the method name
	4. Create classmethod m2 and print the method name
	5. Create staticmethod m3 and print the method name
	6. Create chile class and inherit it wil parent
	7. Create instance of the child class and call methods defined in parent class
	8. print variables declared in the parent class using instance of child """

class parent:
    v2=10
    def __init__(self):
        v2=20
    def m1(self):
        print("Method is m1")
    @classmethod
    def m2(cls):
        print("Method is m2")
    @staticmethod
    def m3():
        print("Method is m3")

class child(parent):
    pass

obj=child()
obj.m1()
obj.m2()
obj.m3()
print(obj.v2)

"""Output
Method is m1
Method is m2
Method is m3
10"""
"""8. Write the output ofbelow skeleton
	class P
		a = 10
		init
			self.b=20
	class C(P)
		c = 30
		init
			self.d=40

	c1=C()
	println(c1.a,c1.b,c1.c,c1.d)
	Use issubclass to check if C class is subclass of P andprint the outout."""


class P:
    a = 10
    def __init__(self):
        self.b = 20
class C(P):
    c = 30

    def __init__(self):
        self.d = 40


c1 = C()
print(c1.a, c1.c)
print(issubclass(C, P))

"""Output
10 30
True"""#1. Write note on inheretance

"""Inheritance allows us to define a class that inherits all the methods and properties from another class
The benefits of inheritance are:


It represents real-world relationships well.
It provides reusability of a code. We donâ€™t have to write the same code again and again. Also, it allows us to add more features to a class without modifying it.
It is transitive in nature, which means that if class B inherits from another class A, then all the subclasses of B would automatically inherit from class A..

Parent class is the class being inherited from, also called base class.

Child class is the class that inherits from another class, also called derived class.
"""